conclusion


Discussion on possible and actual improvements/followups. 


Improvements/Followups.


There have been a large amount of improvements and followups on the SCS problem. The paper proved that their algorithm had an upper bound minimum string length of $3n$, where $n$ is the optimal length. Successive papers throughout the years improved the upper bounds: Teng and Yao improved the bound to $2 \frac{8}{9} n$; Czumaj et al. by $2 \frac{5}{6} n$; Kosaraju, Stien and Park by $2 \frac{50}{63} n$; Stein and Armen by $2 \frac{3}{4} n$, then by $2 \frac{2}{3} n$; Breslauer et al. by 2.596 and lastly $2.5 n$ by Sweedyk \cite{sweedyk2000boldmath}. We will quickly describe what Sweedyk does.\\

The previous algorithms, including the one in our paper constructed a directed graph $G$ where each edge in the graph has a positive weight. The weight denotes the length. The algorithms would then construct a cycle cover on the graph. The cycle cover would be a minimum-length cycle cover. The set of cycle-covers were the strings $S$ that would be concatenated together to form the superstring.\\

The algorithm described in the $2\half$ paper worked by constructing a graph $G$, like above and constructing a minimal-length cycle-cover. Where it differs from previous algorithms is the algorithm then takes the set of cycle-covers and attempts to merge each cycle with another cycle. Once complete they follow above and remove each cycle and unravel it to create a string. Once all cycles are unraveled from the cycles they concatenate and have a superstring. The authors argue that their algorithm can be improved upon up to $2OPT$ and hint at working on a proof for showing that a modified version will acheive $2\frac{1}{3} OPT$\\





@article{sweedyk2000boldmath,
  title={A 2.5-Approximation Algorithm for Shortest Superstring},
  author={Sweedyk, Z},
  journal={SIAM Journal on Computing},
  volume={29},
  number={3},
  pages={954--986},
  year={2000},
  publisher={SIAM}
}
